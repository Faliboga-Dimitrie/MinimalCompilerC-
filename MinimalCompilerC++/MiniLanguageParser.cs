//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.13.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from c:/Users/Dimitrie_U/1Facultate/Anul2/Semestrul1/LFC/Proiecte/Proiect2/MinimalCompilerC++/MinimalCompilerC++/MiniLanguage.g4 by ANTLR 4.13.1

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.13.1")]
[System.CLSCompliant(false)]
public partial class MiniLanguageParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		MAIN_FUNCTION=1, NEW_LINE=2, INTEGER_TYPE=3, FLOAT_TYPE=4, DOUBLE_TYPE=5, 
		STRING_TYPE=6, VOID_TYPE=7, IF=8, ELSE=9, WHILE=10, FOR=11, RETURN=12, 
		ASTERISK=13, SLASH=14, PLUS=15, MINUS=16, LESS_THAN=17, LESS_THAN_OR_EQUAL=18, 
		GREATER_THAN=19, GREATER_THAN_OR_EQUAL=20, EQUAL=21, NOT_EQUAL=22, AND=23, 
		OR=24, NOT=25, EQUALS=26, ADD_EQUALS=27, SUB_EQUALS=28, MUL_EQUALS=29, 
		DIV_EQUALS=30, INC=31, DEC=32, LPARAN=33, RPARAN=34, LBRACE=35, RBRACE=36, 
		SEMICOLON=37, COMMA=38, INTEGER_VALUE=39, FLOAT_VALUE=40, DOUBLE_VALUE=41, 
		STRING_VALUE=42, VARIABLE_NAME=43, WS=44, COMMENT=45;
	public const int
		RULE_program = 0, RULE_main_declaration = 1, RULE_function_declaration = 2, 
		RULE_parameters = 3, RULE_new_line_block = 4, RULE_block = 5, RULE_statement = 6, 
		RULE_if_statement = 7, RULE_while_statement = 8, RULE_for_statement = 9, 
		RULE_for_clause = 10, RULE_return_statement = 11, RULE_function_call_no_semicolon = 12, 
		RULE_function_call = 13, RULE_arguments = 14, RULE_expression = 15, RULE_logical_expression = 16, 
		RULE_relational_or_equality_expression = 17, RULE_additive_or_subtractive_expression = 18, 
		RULE_multiplicative_expression = 19, RULE_unary_expression = 20, RULE_primary_expression = 21, 
		RULE_declaration_and_assignment_no_semicolon = 22, RULE_declaration_and_assignment = 23, 
		RULE_declaration = 24, RULE_type = 25, RULE_return_type = 26, RULE_value = 27, 
		RULE_numeral_value = 28, RULE_assignment_no_semicolon = 29, RULE_assignment = 30, 
		RULE_assignment_op_no_semicolon = 31, RULE_assignment_op = 32, RULE_post_inccrement_or_decrement_no_semicolon = 33, 
		RULE_post_inccrement_or_decrement = 34, RULE_prev_inccrement_or_decrement_no_semicolon = 35, 
		RULE_prev_inccrement_or_decrement = 36;
	public static readonly string[] ruleNames = {
		"program", "main_declaration", "function_declaration", "parameters", "new_line_block", 
		"block", "statement", "if_statement", "while_statement", "for_statement", 
		"for_clause", "return_statement", "function_call_no_semicolon", "function_call", 
		"arguments", "expression", "logical_expression", "relational_or_equality_expression", 
		"additive_or_subtractive_expression", "multiplicative_expression", "unary_expression", 
		"primary_expression", "declaration_and_assignment_no_semicolon", "declaration_and_assignment", 
		"declaration", "type", "return_type", "value", "numeral_value", "assignment_no_semicolon", 
		"assignment", "assignment_op_no_semicolon", "assignment_op", "post_inccrement_or_decrement_no_semicolon", 
		"post_inccrement_or_decrement", "prev_inccrement_or_decrement_no_semicolon", 
		"prev_inccrement_or_decrement"
	};

	private static readonly string[] _LiteralNames = {
		null, "'main'", "'\\n'", "'int'", "'float'", "'double'", "'string'", "'void'", 
		"'if'", "'else'", "'while'", "'for'", "'return'", "'*'", "'/'", "'+'", 
		"'-'", "'<'", "'<='", "'>'", "'>='", "'=='", "'!='", "'&&'", "'||'", "'!'", 
		"'='", "'+='", "'-='", "'*='", "'/='", "'++'", "'--'", "'('", "')'", "'{'", 
		"'}'", "';'", "','"
	};
	private static readonly string[] _SymbolicNames = {
		null, "MAIN_FUNCTION", "NEW_LINE", "INTEGER_TYPE", "FLOAT_TYPE", "DOUBLE_TYPE", 
		"STRING_TYPE", "VOID_TYPE", "IF", "ELSE", "WHILE", "FOR", "RETURN", "ASTERISK", 
		"SLASH", "PLUS", "MINUS", "LESS_THAN", "LESS_THAN_OR_EQUAL", "GREATER_THAN", 
		"GREATER_THAN_OR_EQUAL", "EQUAL", "NOT_EQUAL", "AND", "OR", "NOT", "EQUALS", 
		"ADD_EQUALS", "SUB_EQUALS", "MUL_EQUALS", "DIV_EQUALS", "INC", "DEC", 
		"LPARAN", "RPARAN", "LBRACE", "RBRACE", "SEMICOLON", "COMMA", "INTEGER_VALUE", 
		"FLOAT_VALUE", "DOUBLE_VALUE", "STRING_VALUE", "VARIABLE_NAME", "WS", 
		"COMMENT"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "MiniLanguage.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override int[] SerializedAtn { get { return _serializedATN; } }

	static MiniLanguageParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public MiniLanguageParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public MiniLanguageParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class ProgramContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Main_declarationContext main_declaration() {
			return GetRuleContext<Main_declarationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Eof() { return GetToken(MiniLanguageParser.Eof, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public DeclarationContext[] declaration() {
			return GetRuleContexts<DeclarationContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public DeclarationContext declaration(int i) {
			return GetRuleContext<DeclarationContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Declaration_and_assignmentContext[] declaration_and_assignment() {
			return GetRuleContexts<Declaration_and_assignmentContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Declaration_and_assignmentContext declaration_and_assignment(int i) {
			return GetRuleContext<Declaration_and_assignmentContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Function_declarationContext[] function_declaration() {
			return GetRuleContexts<Function_declarationContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Function_declarationContext function_declaration(int i) {
			return GetRuleContext<Function_declarationContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMENT() { return GetTokens(MiniLanguageParser.COMMENT); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMENT(int i) {
			return GetToken(MiniLanguageParser.COMMENT, i);
		}
		public ProgramContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_program; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMiniLanguageVisitor<TResult> typedVisitor = visitor as IMiniLanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitProgram(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ProgramContext program() {
		ProgramContext _localctx = new ProgramContext(Context, State);
		EnterRule(_localctx, 0, RULE_program);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 80;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,1,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					State = 78;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,0,Context) ) {
					case 1:
						{
						State = 74;
						declaration();
						}
						break;
					case 2:
						{
						State = 75;
						declaration_and_assignment();
						}
						break;
					case 3:
						{
						State = 76;
						function_declaration();
						}
						break;
					case 4:
						{
						State = 77;
						Match(COMMENT);
						}
						break;
					}
					} 
				}
				State = 82;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,1,Context);
			}
			State = 83;
			main_declaration();
			State = 87;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMENT) {
				{
				{
				State = 84;
				Match(COMMENT);
				}
				}
				State = 89;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 90;
			Match(Eof);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Main_declarationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Return_typeContext return_type() {
			return GetRuleContext<Return_typeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MAIN_FUNCTION() { return GetToken(MiniLanguageParser.MAIN_FUNCTION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPARAN() { return GetToken(MiniLanguageParser.LPARAN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPARAN() { return GetToken(MiniLanguageParser.RPARAN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public New_line_blockContext new_line_block() {
			return GetRuleContext<New_line_blockContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMENT() { return GetToken(MiniLanguageParser.COMMENT, 0); }
		public Main_declarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_main_declaration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMiniLanguageVisitor<TResult> typedVisitor = visitor as IMiniLanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMain_declaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Main_declarationContext main_declaration() {
		Main_declarationContext _localctx = new Main_declarationContext(Context, State);
		EnterRule(_localctx, 2, RULE_main_declaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 92;
			return_type();
			State = 93;
			Match(MAIN_FUNCTION);
			State = 94;
			Match(LPARAN);
			State = 95;
			Match(RPARAN);
			State = 101;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case NEW_LINE:
			case COMMENT:
				{
				State = 97;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==COMMENT) {
					{
					State = 96;
					Match(COMMENT);
					}
				}

				State = 99;
				new_line_block();
				}
				break;
			case LBRACE:
				{
				State = 100;
				block();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Function_declarationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Return_typeContext return_type() {
			return GetRuleContext<Return_typeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VARIABLE_NAME() { return GetToken(MiniLanguageParser.VARIABLE_NAME, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPARAN() { return GetToken(MiniLanguageParser.LPARAN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPARAN() { return GetToken(MiniLanguageParser.RPARAN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public New_line_blockContext new_line_block() {
			return GetRuleContext<New_line_blockContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ParametersContext parameters() {
			return GetRuleContext<ParametersContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMENT() { return GetToken(MiniLanguageParser.COMMENT, 0); }
		public Function_declarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_function_declaration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMiniLanguageVisitor<TResult> typedVisitor = visitor as IMiniLanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunction_declaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Function_declarationContext function_declaration() {
		Function_declarationContext _localctx = new Function_declarationContext(Context, State);
		EnterRule(_localctx, 4, RULE_function_declaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 103;
			return_type();
			State = 104;
			Match(VARIABLE_NAME);
			State = 105;
			Match(LPARAN);
			State = 107;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 120L) != 0)) {
				{
				State = 106;
				parameters();
				}
			}

			State = 109;
			Match(RPARAN);
			State = 115;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case NEW_LINE:
			case COMMENT:
				{
				State = 111;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==COMMENT) {
					{
					State = 110;
					Match(COMMENT);
					}
				}

				State = 113;
				new_line_block();
				}
				break;
			case LBRACE:
				{
				State = 114;
				block();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ParametersContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public TypeContext[] type() {
			return GetRuleContexts<TypeContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public TypeContext type(int i) {
			return GetRuleContext<TypeContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] VARIABLE_NAME() { return GetTokens(MiniLanguageParser.VARIABLE_NAME); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VARIABLE_NAME(int i) {
			return GetToken(MiniLanguageParser.VARIABLE_NAME, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(MiniLanguageParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(MiniLanguageParser.COMMA, i);
		}
		public ParametersContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_parameters; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMiniLanguageVisitor<TResult> typedVisitor = visitor as IMiniLanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitParameters(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ParametersContext parameters() {
		ParametersContext _localctx = new ParametersContext(Context, State);
		EnterRule(_localctx, 6, RULE_parameters);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 117;
			type();
			State = 118;
			Match(VARIABLE_NAME);
			State = 125;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 119;
				Match(COMMA);
				State = 120;
				type();
				State = 121;
				Match(VARIABLE_NAME);
				}
				}
				State = 127;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class New_line_blockContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NEW_LINE() { return GetToken(MiniLanguageParser.NEW_LINE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		public New_line_blockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_new_line_block; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMiniLanguageVisitor<TResult> typedVisitor = visitor as IMiniLanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNew_line_block(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public New_line_blockContext new_line_block() {
		New_line_blockContext _localctx = new New_line_blockContext(Context, State);
		EnterRule(_localctx, 8, RULE_new_line_block);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 128;
			Match(NEW_LINE);
			State = 129;
			block();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BlockContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LBRACE() { return GetToken(MiniLanguageParser.LBRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RBRACE() { return GetToken(MiniLanguageParser.RBRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMENT() { return GetTokens(MiniLanguageParser.COMMENT); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMENT(int i) {
			return GetToken(MiniLanguageParser.COMMENT, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		public BlockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_block; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMiniLanguageVisitor<TResult> typedVisitor = visitor as IMiniLanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBlock(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BlockContext block() {
		BlockContext _localctx = new BlockContext(Context, State);
		EnterRule(_localctx, 10, RULE_block);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 131;
			Match(LBRACE);
			State = 136;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & 43980465118584L) != 0)) {
				{
				State = 134;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case COMMENT:
					{
					State = 132;
					Match(COMMENT);
					}
					break;
				case INTEGER_TYPE:
				case FLOAT_TYPE:
				case DOUBLE_TYPE:
				case STRING_TYPE:
				case IF:
				case WHILE:
				case FOR:
				case RETURN:
				case VARIABLE_NAME:
					{
					State = 133;
					statement();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				State = 138;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 139;
			Match(RBRACE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public AssignmentContext assignment() {
			return GetRuleContext<AssignmentContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Assignment_opContext assignment_op() {
			return GetRuleContext<Assignment_opContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DeclarationContext declaration() {
			return GetRuleContext<DeclarationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Declaration_and_assignmentContext declaration_and_assignment() {
			return GetRuleContext<Declaration_and_assignmentContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Function_callContext function_call() {
			return GetRuleContext<Function_callContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public If_statementContext if_statement() {
			return GetRuleContext<If_statementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public While_statementContext while_statement() {
			return GetRuleContext<While_statementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public For_statementContext for_statement() {
			return GetRuleContext<For_statementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Return_statementContext return_statement() {
			return GetRuleContext<Return_statementContext>(0);
		}
		public StatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_statement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMiniLanguageVisitor<TResult> typedVisitor = visitor as IMiniLanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StatementContext statement() {
		StatementContext _localctx = new StatementContext(Context, State);
		EnterRule(_localctx, 12, RULE_statement);
		try {
			State = 150;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,11,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 141;
				assignment();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 142;
				assignment_op();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 143;
				declaration();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 144;
				declaration_and_assignment();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 145;
				function_call();
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 146;
				if_statement();
				}
				break;
			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 147;
				while_statement();
				}
				break;
			case 8:
				EnterOuterAlt(_localctx, 8);
				{
				State = 148;
				for_statement();
				}
				break;
			case 9:
				EnterOuterAlt(_localctx, 9);
				{
				State = 149;
				return_statement();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class If_statementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IF() { return GetToken(MiniLanguageParser.IF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPARAN() { return GetToken(MiniLanguageParser.LPARAN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Logical_expressionContext logical_expression() {
			return GetRuleContext<Logical_expressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPARAN() { return GetToken(MiniLanguageParser.RPARAN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public New_line_blockContext[] new_line_block() {
			return GetRuleContexts<New_line_blockContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public New_line_blockContext new_line_block(int i) {
			return GetRuleContext<New_line_blockContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public BlockContext[] block() {
			return GetRuleContexts<BlockContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public BlockContext block(int i) {
			return GetRuleContext<BlockContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ELSE() { return GetToken(MiniLanguageParser.ELSE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMENT() { return GetTokens(MiniLanguageParser.COMMENT); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMENT(int i) {
			return GetToken(MiniLanguageParser.COMMENT, i);
		}
		public If_statementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_if_statement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMiniLanguageVisitor<TResult> typedVisitor = visitor as IMiniLanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIf_statement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public If_statementContext if_statement() {
		If_statementContext _localctx = new If_statementContext(Context, State);
		EnterRule(_localctx, 14, RULE_if_statement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 152;
			Match(IF);
			State = 153;
			Match(LPARAN);
			State = 154;
			logical_expression();
			State = 155;
			Match(RPARAN);
			State = 161;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case NEW_LINE:
			case COMMENT:
				{
				State = 157;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==COMMENT) {
					{
					State = 156;
					Match(COMMENT);
					}
				}

				State = 159;
				new_line_block();
				}
				break;
			case LBRACE:
				{
				State = 160;
				block();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			State = 171;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==ELSE) {
				{
				State = 163;
				Match(ELSE);
				State = 169;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case NEW_LINE:
				case COMMENT:
					{
					State = 165;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if (_la==COMMENT) {
						{
						State = 164;
						Match(COMMENT);
						}
					}

					State = 167;
					new_line_block();
					}
					break;
				case LBRACE:
					{
					State = 168;
					block();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class While_statementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WHILE() { return GetToken(MiniLanguageParser.WHILE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPARAN() { return GetToken(MiniLanguageParser.LPARAN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPARAN() { return GetToken(MiniLanguageParser.RPARAN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public New_line_blockContext new_line_block() {
			return GetRuleContext<New_line_blockContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMENT() { return GetToken(MiniLanguageParser.COMMENT, 0); }
		public While_statementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_while_statement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMiniLanguageVisitor<TResult> typedVisitor = visitor as IMiniLanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitWhile_statement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public While_statementContext while_statement() {
		While_statementContext _localctx = new While_statementContext(Context, State);
		EnterRule(_localctx, 16, RULE_while_statement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 173;
			Match(WHILE);
			State = 174;
			Match(LPARAN);
			State = 175;
			expression();
			State = 176;
			Match(RPARAN);
			State = 182;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case NEW_LINE:
			case COMMENT:
				{
				State = 178;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==COMMENT) {
					{
					State = 177;
					Match(COMMENT);
					}
				}

				State = 180;
				new_line_block();
				}
				break;
			case LBRACE:
				{
				State = 181;
				block();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class For_statementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FOR() { return GetToken(MiniLanguageParser.FOR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPARAN() { return GetToken(MiniLanguageParser.LPARAN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public For_clauseContext for_clause() {
			return GetRuleContext<For_clauseContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPARAN() { return GetToken(MiniLanguageParser.RPARAN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public New_line_blockContext new_line_block() {
			return GetRuleContext<New_line_blockContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMENT() { return GetToken(MiniLanguageParser.COMMENT, 0); }
		public For_statementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_for_statement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMiniLanguageVisitor<TResult> typedVisitor = visitor as IMiniLanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFor_statement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public For_statementContext for_statement() {
		For_statementContext _localctx = new For_statementContext(Context, State);
		EnterRule(_localctx, 18, RULE_for_statement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 184;
			Match(FOR);
			State = 185;
			Match(LPARAN);
			State = 186;
			for_clause();
			State = 187;
			Match(RPARAN);
			State = 193;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case NEW_LINE:
			case COMMENT:
				{
				State = 189;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==COMMENT) {
					{
					State = 188;
					Match(COMMENT);
					}
				}

				State = 191;
				new_line_block();
				}
				break;
			case LBRACE:
				{
				State = 192;
				block();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class For_clauseContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] SEMICOLON() { return GetTokens(MiniLanguageParser.SEMICOLON); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMICOLON(int i) {
			return GetToken(MiniLanguageParser.SEMICOLON, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Assignment_no_semicolonContext assignment_no_semicolon() {
			return GetRuleContext<Assignment_no_semicolonContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Declaration_and_assignment_no_semicolonContext declaration_and_assignment_no_semicolon() {
			return GetRuleContext<Declaration_and_assignment_no_semicolonContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Assignment_op_no_semicolonContext assignment_op_no_semicolon() {
			return GetRuleContext<Assignment_op_no_semicolonContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Prev_inccrement_or_decrement_no_semicolonContext prev_inccrement_or_decrement_no_semicolon() {
			return GetRuleContext<Prev_inccrement_or_decrement_no_semicolonContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Post_inccrement_or_decrement_no_semicolonContext post_inccrement_or_decrement_no_semicolon() {
			return GetRuleContext<Post_inccrement_or_decrement_no_semicolonContext>(0);
		}
		public For_clauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_for_clause; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMiniLanguageVisitor<TResult> typedVisitor = visitor as IMiniLanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFor_clause(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public For_clauseContext for_clause() {
		For_clauseContext _localctx = new For_clauseContext(Context, State);
		EnterRule(_localctx, 20, RULE_for_clause);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 197;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case VARIABLE_NAME:
				{
				State = 195;
				assignment_no_semicolon();
				}
				break;
			case INTEGER_TYPE:
			case FLOAT_TYPE:
			case DOUBLE_TYPE:
			case STRING_TYPE:
				{
				State = 196;
				declaration_and_assignment_no_semicolon();
				}
				break;
			case SEMICOLON:
				break;
			default:
				break;
			}
			State = 199;
			Match(SEMICOLON);
			State = 200;
			expression();
			State = 201;
			Match(SEMICOLON);
			State = 207;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,23,Context) ) {
			case 1:
				{
				State = 202;
				assignment_op_no_semicolon();
				}
				break;
			case 2:
				{
				State = 205;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case INC:
				case DEC:
					{
					State = 203;
					prev_inccrement_or_decrement_no_semicolon();
					}
					break;
				case VARIABLE_NAME:
					{
					State = 204;
					post_inccrement_or_decrement_no_semicolon();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Return_statementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RETURN() { return GetToken(MiniLanguageParser.RETURN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMICOLON() { return GetToken(MiniLanguageParser.SEMICOLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMENT() { return GetToken(MiniLanguageParser.COMMENT, 0); }
		public Return_statementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_return_statement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMiniLanguageVisitor<TResult> typedVisitor = visitor as IMiniLanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitReturn_statement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Return_statementContext return_statement() {
		Return_statementContext _localctx = new Return_statementContext(Context, State);
		EnterRule(_localctx, 22, RULE_return_statement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 209;
			Match(RETURN);
			State = 210;
			expression();
			State = 211;
			Match(SEMICOLON);
			State = 213;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,24,Context) ) {
			case 1:
				{
				State = 212;
				Match(COMMENT);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Function_call_no_semicolonContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VARIABLE_NAME() { return GetToken(MiniLanguageParser.VARIABLE_NAME, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPARAN() { return GetToken(MiniLanguageParser.LPARAN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPARAN() { return GetToken(MiniLanguageParser.RPARAN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ArgumentsContext arguments() {
			return GetRuleContext<ArgumentsContext>(0);
		}
		public Function_call_no_semicolonContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_function_call_no_semicolon; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMiniLanguageVisitor<TResult> typedVisitor = visitor as IMiniLanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunction_call_no_semicolon(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Function_call_no_semicolonContext function_call_no_semicolon() {
		Function_call_no_semicolonContext _localctx = new Function_call_no_semicolonContext(Context, State);
		EnterRule(_localctx, 24, RULE_function_call_no_semicolon);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 215;
			Match(VARIABLE_NAME);
			State = 216;
			Match(LPARAN);
			State = 218;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==VARIABLE_NAME) {
				{
				State = 217;
				arguments();
				}
			}

			State = 220;
			Match(RPARAN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Function_callContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VARIABLE_NAME() { return GetToken(MiniLanguageParser.VARIABLE_NAME, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPARAN() { return GetToken(MiniLanguageParser.LPARAN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPARAN() { return GetToken(MiniLanguageParser.RPARAN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMICOLON() { return GetToken(MiniLanguageParser.SEMICOLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ArgumentsContext arguments() {
			return GetRuleContext<ArgumentsContext>(0);
		}
		public Function_callContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_function_call; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMiniLanguageVisitor<TResult> typedVisitor = visitor as IMiniLanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunction_call(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Function_callContext function_call() {
		Function_callContext _localctx = new Function_callContext(Context, State);
		EnterRule(_localctx, 26, RULE_function_call);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 222;
			Match(VARIABLE_NAME);
			State = 223;
			Match(LPARAN);
			State = 225;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==VARIABLE_NAME) {
				{
				State = 224;
				arguments();
				}
			}

			State = 227;
			Match(RPARAN);
			State = 228;
			Match(SEMICOLON);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArgumentsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] VARIABLE_NAME() { return GetTokens(MiniLanguageParser.VARIABLE_NAME); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VARIABLE_NAME(int i) {
			return GetToken(MiniLanguageParser.VARIABLE_NAME, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(MiniLanguageParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(MiniLanguageParser.COMMA, i);
		}
		public ArgumentsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_arguments; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMiniLanguageVisitor<TResult> typedVisitor = visitor as IMiniLanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArguments(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ArgumentsContext arguments() {
		ArgumentsContext _localctx = new ArgumentsContext(Context, State);
		EnterRule(_localctx, 28, RULE_arguments);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 230;
			Match(VARIABLE_NAME);
			State = 235;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 231;
				Match(COMMA);
				State = 232;
				Match(VARIABLE_NAME);
				}
				}
				State = 237;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExpressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Logical_expressionContext logical_expression() {
			return GetRuleContext<Logical_expressionContext>(0);
		}
		public ExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMiniLanguageVisitor<TResult> typedVisitor = visitor as IMiniLanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExpressionContext expression() {
		ExpressionContext _localctx = new ExpressionContext(Context, State);
		EnterRule(_localctx, 30, RULE_expression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 238;
			logical_expression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Logical_expressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Relational_or_equality_expressionContext[] relational_or_equality_expression() {
			return GetRuleContexts<Relational_or_equality_expressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Relational_or_equality_expressionContext relational_or_equality_expression(int i) {
			return GetRuleContext<Relational_or_equality_expressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AND() { return GetToken(MiniLanguageParser.AND, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OR() { return GetToken(MiniLanguageParser.OR, 0); }
		public Logical_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_logical_expression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMiniLanguageVisitor<TResult> typedVisitor = visitor as IMiniLanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLogical_expression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Logical_expressionContext logical_expression() {
		Logical_expressionContext _localctx = new Logical_expressionContext(Context, State);
		EnterRule(_localctx, 32, RULE_logical_expression);
		int _la;
		try {
			State = 245;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,28,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 240;
				relational_or_equality_expression();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 241;
				relational_or_equality_expression();
				State = 242;
				_la = TokenStream.LA(1);
				if ( !(_la==AND || _la==OR) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 243;
				relational_or_equality_expression();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Relational_or_equality_expressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Additive_or_subtractive_expressionContext[] additive_or_subtractive_expression() {
			return GetRuleContexts<Additive_or_subtractive_expressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Additive_or_subtractive_expressionContext additive_or_subtractive_expression(int i) {
			return GetRuleContext<Additive_or_subtractive_expressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQUAL() { return GetToken(MiniLanguageParser.EQUAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NOT_EQUAL() { return GetToken(MiniLanguageParser.NOT_EQUAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LESS_THAN() { return GetToken(MiniLanguageParser.LESS_THAN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LESS_THAN_OR_EQUAL() { return GetToken(MiniLanguageParser.LESS_THAN_OR_EQUAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GREATER_THAN() { return GetToken(MiniLanguageParser.GREATER_THAN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GREATER_THAN_OR_EQUAL() { return GetToken(MiniLanguageParser.GREATER_THAN_OR_EQUAL, 0); }
		public Relational_or_equality_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_relational_or_equality_expression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMiniLanguageVisitor<TResult> typedVisitor = visitor as IMiniLanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRelational_or_equality_expression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Relational_or_equality_expressionContext relational_or_equality_expression() {
		Relational_or_equality_expressionContext _localctx = new Relational_or_equality_expressionContext(Context, State);
		EnterRule(_localctx, 34, RULE_relational_or_equality_expression);
		int _la;
		try {
			State = 252;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,29,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 247;
				additive_or_subtractive_expression();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 248;
				additive_or_subtractive_expression();
				State = 249;
				_la = TokenStream.LA(1);
				if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 8257536L) != 0)) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 250;
				additive_or_subtractive_expression();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Additive_or_subtractive_expressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Multiplicative_expressionContext[] multiplicative_expression() {
			return GetRuleContexts<Multiplicative_expressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Multiplicative_expressionContext multiplicative_expression(int i) {
			return GetRuleContext<Multiplicative_expressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PLUS() { return GetToken(MiniLanguageParser.PLUS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MINUS() { return GetToken(MiniLanguageParser.MINUS, 0); }
		public Additive_or_subtractive_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_additive_or_subtractive_expression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMiniLanguageVisitor<TResult> typedVisitor = visitor as IMiniLanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAdditive_or_subtractive_expression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Additive_or_subtractive_expressionContext additive_or_subtractive_expression() {
		Additive_or_subtractive_expressionContext _localctx = new Additive_or_subtractive_expressionContext(Context, State);
		EnterRule(_localctx, 36, RULE_additive_or_subtractive_expression);
		int _la;
		try {
			State = 259;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,30,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 254;
				multiplicative_expression();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 255;
				multiplicative_expression();
				State = 256;
				_la = TokenStream.LA(1);
				if ( !(_la==PLUS || _la==MINUS) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 257;
				multiplicative_expression();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Multiplicative_expressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Unary_expressionContext[] unary_expression() {
			return GetRuleContexts<Unary_expressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Unary_expressionContext unary_expression(int i) {
			return GetRuleContext<Unary_expressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ASTERISK() { return GetToken(MiniLanguageParser.ASTERISK, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SLASH() { return GetToken(MiniLanguageParser.SLASH, 0); }
		public Multiplicative_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_multiplicative_expression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMiniLanguageVisitor<TResult> typedVisitor = visitor as IMiniLanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMultiplicative_expression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Multiplicative_expressionContext multiplicative_expression() {
		Multiplicative_expressionContext _localctx = new Multiplicative_expressionContext(Context, State);
		EnterRule(_localctx, 38, RULE_multiplicative_expression);
		int _la;
		try {
			State = 266;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,31,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 261;
				unary_expression();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 262;
				unary_expression();
				State = 263;
				_la = TokenStream.LA(1);
				if ( !(_la==ASTERISK || _la==SLASH) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 264;
				unary_expression();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Unary_expressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Primary_expressionContext primary_expression() {
			return GetRuleContext<Primary_expressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NOT() { return GetToken(MiniLanguageParser.NOT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MINUS() { return GetToken(MiniLanguageParser.MINUS, 0); }
		public Unary_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_unary_expression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMiniLanguageVisitor<TResult> typedVisitor = visitor as IMiniLanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUnary_expression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Unary_expressionContext unary_expression() {
		Unary_expressionContext _localctx = new Unary_expressionContext(Context, State);
		EnterRule(_localctx, 40, RULE_unary_expression);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 269;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==MINUS || _la==NOT) {
				{
				State = 268;
				_la = TokenStream.LA(1);
				if ( !(_la==MINUS || _la==NOT) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
			}

			State = 271;
			primary_expression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Primary_expressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VARIABLE_NAME() { return GetToken(MiniLanguageParser.VARIABLE_NAME, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Numeral_valueContext numeral_value() {
			return GetRuleContext<Numeral_valueContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING_VALUE() { return GetToken(MiniLanguageParser.STRING_VALUE, 0); }
		public Primary_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_primary_expression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMiniLanguageVisitor<TResult> typedVisitor = visitor as IMiniLanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPrimary_expression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Primary_expressionContext primary_expression() {
		Primary_expressionContext _localctx = new Primary_expressionContext(Context, State);
		EnterRule(_localctx, 42, RULE_primary_expression);
		try {
			State = 276;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case VARIABLE_NAME:
				EnterOuterAlt(_localctx, 1);
				{
				State = 273;
				Match(VARIABLE_NAME);
				}
				break;
			case INTEGER_VALUE:
			case FLOAT_VALUE:
			case DOUBLE_VALUE:
				EnterOuterAlt(_localctx, 2);
				{
				State = 274;
				numeral_value();
				}
				break;
			case STRING_VALUE:
				EnterOuterAlt(_localctx, 3);
				{
				State = 275;
				Match(STRING_VALUE);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Declaration_and_assignment_no_semicolonContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VARIABLE_NAME() { return GetToken(MiniLanguageParser.VARIABLE_NAME, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQUALS() { return GetToken(MiniLanguageParser.EQUALS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ValueContext value() {
			return GetRuleContext<ValueContext>(0);
		}
		public Declaration_and_assignment_no_semicolonContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_declaration_and_assignment_no_semicolon; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMiniLanguageVisitor<TResult> typedVisitor = visitor as IMiniLanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDeclaration_and_assignment_no_semicolon(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Declaration_and_assignment_no_semicolonContext declaration_and_assignment_no_semicolon() {
		Declaration_and_assignment_no_semicolonContext _localctx = new Declaration_and_assignment_no_semicolonContext(Context, State);
		EnterRule(_localctx, 44, RULE_declaration_and_assignment_no_semicolon);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 278;
			type();
			State = 279;
			Match(VARIABLE_NAME);
			State = 280;
			Match(EQUALS);
			State = 281;
			value();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Declaration_and_assignmentContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VARIABLE_NAME() { return GetToken(MiniLanguageParser.VARIABLE_NAME, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQUALS() { return GetToken(MiniLanguageParser.EQUALS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ValueContext value() {
			return GetRuleContext<ValueContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMICOLON() { return GetToken(MiniLanguageParser.SEMICOLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMENT() { return GetToken(MiniLanguageParser.COMMENT, 0); }
		public Declaration_and_assignmentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_declaration_and_assignment; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMiniLanguageVisitor<TResult> typedVisitor = visitor as IMiniLanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDeclaration_and_assignment(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Declaration_and_assignmentContext declaration_and_assignment() {
		Declaration_and_assignmentContext _localctx = new Declaration_and_assignmentContext(Context, State);
		EnterRule(_localctx, 46, RULE_declaration_and_assignment);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 283;
			type();
			State = 284;
			Match(VARIABLE_NAME);
			State = 285;
			Match(EQUALS);
			State = 286;
			value();
			State = 287;
			Match(SEMICOLON);
			State = 289;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,34,Context) ) {
			case 1:
				{
				State = 288;
				Match(COMMENT);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DeclarationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VARIABLE_NAME() { return GetToken(MiniLanguageParser.VARIABLE_NAME, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMICOLON() { return GetToken(MiniLanguageParser.SEMICOLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMENT() { return GetToken(MiniLanguageParser.COMMENT, 0); }
		public DeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_declaration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMiniLanguageVisitor<TResult> typedVisitor = visitor as IMiniLanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DeclarationContext declaration() {
		DeclarationContext _localctx = new DeclarationContext(Context, State);
		EnterRule(_localctx, 48, RULE_declaration);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 291;
			type();
			State = 292;
			Match(VARIABLE_NAME);
			State = 293;
			Match(SEMICOLON);
			State = 295;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,35,Context) ) {
			case 1:
				{
				State = 294;
				Match(COMMENT);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INTEGER_TYPE() { return GetToken(MiniLanguageParser.INTEGER_TYPE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FLOAT_TYPE() { return GetToken(MiniLanguageParser.FLOAT_TYPE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING_TYPE() { return GetToken(MiniLanguageParser.STRING_TYPE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOUBLE_TYPE() { return GetToken(MiniLanguageParser.DOUBLE_TYPE, 0); }
		public TypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_type; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMiniLanguageVisitor<TResult> typedVisitor = visitor as IMiniLanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TypeContext type() {
		TypeContext _localctx = new TypeContext(Context, State);
		EnterRule(_localctx, 50, RULE_type);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 297;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 120L) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Return_typeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VOID_TYPE() { return GetToken(MiniLanguageParser.VOID_TYPE, 0); }
		public Return_typeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_return_type; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMiniLanguageVisitor<TResult> typedVisitor = visitor as IMiniLanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitReturn_type(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Return_typeContext return_type() {
		Return_typeContext _localctx = new Return_typeContext(Context, State);
		EnterRule(_localctx, 52, RULE_return_type);
		try {
			State = 301;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case INTEGER_TYPE:
			case FLOAT_TYPE:
			case DOUBLE_TYPE:
			case STRING_TYPE:
				EnterOuterAlt(_localctx, 1);
				{
				State = 299;
				type();
				}
				break;
			case VOID_TYPE:
				EnterOuterAlt(_localctx, 2);
				{
				State = 300;
				Match(VOID_TYPE);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ValueContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Numeral_valueContext numeral_value() {
			return GetRuleContext<Numeral_valueContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VARIABLE_NAME() { return GetToken(MiniLanguageParser.VARIABLE_NAME, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Function_call_no_semicolonContext function_call_no_semicolon() {
			return GetRuleContext<Function_call_no_semicolonContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING_VALUE() { return GetToken(MiniLanguageParser.STRING_VALUE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ValueContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_value; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMiniLanguageVisitor<TResult> typedVisitor = visitor as IMiniLanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitValue(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ValueContext value() {
		ValueContext _localctx = new ValueContext(Context, State);
		EnterRule(_localctx, 54, RULE_value);
		try {
			State = 308;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,37,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 303;
				numeral_value();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 304;
				Match(VARIABLE_NAME);
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 305;
				function_call_no_semicolon();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 306;
				Match(STRING_VALUE);
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 307;
				expression();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Numeral_valueContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INTEGER_VALUE() { return GetToken(MiniLanguageParser.INTEGER_VALUE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FLOAT_VALUE() { return GetToken(MiniLanguageParser.FLOAT_VALUE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOUBLE_VALUE() { return GetToken(MiniLanguageParser.DOUBLE_VALUE, 0); }
		public Numeral_valueContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_numeral_value; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMiniLanguageVisitor<TResult> typedVisitor = visitor as IMiniLanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNumeral_value(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Numeral_valueContext numeral_value() {
		Numeral_valueContext _localctx = new Numeral_valueContext(Context, State);
		EnterRule(_localctx, 56, RULE_numeral_value);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 310;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 3848290697216L) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Assignment_no_semicolonContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VARIABLE_NAME() { return GetToken(MiniLanguageParser.VARIABLE_NAME, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQUALS() { return GetToken(MiniLanguageParser.EQUALS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ValueContext value() {
			return GetRuleContext<ValueContext>(0);
		}
		public Assignment_no_semicolonContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_assignment_no_semicolon; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMiniLanguageVisitor<TResult> typedVisitor = visitor as IMiniLanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAssignment_no_semicolon(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Assignment_no_semicolonContext assignment_no_semicolon() {
		Assignment_no_semicolonContext _localctx = new Assignment_no_semicolonContext(Context, State);
		EnterRule(_localctx, 58, RULE_assignment_no_semicolon);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 312;
			Match(VARIABLE_NAME);
			State = 313;
			Match(EQUALS);
			State = 314;
			value();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AssignmentContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VARIABLE_NAME() { return GetToken(MiniLanguageParser.VARIABLE_NAME, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQUALS() { return GetToken(MiniLanguageParser.EQUALS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ValueContext value() {
			return GetRuleContext<ValueContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMICOLON() { return GetToken(MiniLanguageParser.SEMICOLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMENT() { return GetToken(MiniLanguageParser.COMMENT, 0); }
		public AssignmentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_assignment; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMiniLanguageVisitor<TResult> typedVisitor = visitor as IMiniLanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAssignment(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AssignmentContext assignment() {
		AssignmentContext _localctx = new AssignmentContext(Context, State);
		EnterRule(_localctx, 60, RULE_assignment);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 316;
			Match(VARIABLE_NAME);
			State = 317;
			Match(EQUALS);
			State = 318;
			value();
			State = 319;
			Match(SEMICOLON);
			State = 321;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,38,Context) ) {
			case 1:
				{
				State = 320;
				Match(COMMENT);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Assignment_op_no_semicolonContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VARIABLE_NAME() { return GetToken(MiniLanguageParser.VARIABLE_NAME, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ValueContext value() {
			return GetRuleContext<ValueContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ADD_EQUALS() { return GetToken(MiniLanguageParser.ADD_EQUALS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SUB_EQUALS() { return GetToken(MiniLanguageParser.SUB_EQUALS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MUL_EQUALS() { return GetToken(MiniLanguageParser.MUL_EQUALS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DIV_EQUALS() { return GetToken(MiniLanguageParser.DIV_EQUALS, 0); }
		public Assignment_op_no_semicolonContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_assignment_op_no_semicolon; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMiniLanguageVisitor<TResult> typedVisitor = visitor as IMiniLanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAssignment_op_no_semicolon(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Assignment_op_no_semicolonContext assignment_op_no_semicolon() {
		Assignment_op_no_semicolonContext _localctx = new Assignment_op_no_semicolonContext(Context, State);
		EnterRule(_localctx, 62, RULE_assignment_op_no_semicolon);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 323;
			Match(VARIABLE_NAME);
			State = 324;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 2013265920L) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			State = 325;
			value();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Assignment_opContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VARIABLE_NAME() { return GetToken(MiniLanguageParser.VARIABLE_NAME, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ValueContext value() {
			return GetRuleContext<ValueContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMICOLON() { return GetToken(MiniLanguageParser.SEMICOLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ADD_EQUALS() { return GetToken(MiniLanguageParser.ADD_EQUALS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SUB_EQUALS() { return GetToken(MiniLanguageParser.SUB_EQUALS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MUL_EQUALS() { return GetToken(MiniLanguageParser.MUL_EQUALS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DIV_EQUALS() { return GetToken(MiniLanguageParser.DIV_EQUALS, 0); }
		public Assignment_opContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_assignment_op; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMiniLanguageVisitor<TResult> typedVisitor = visitor as IMiniLanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAssignment_op(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Assignment_opContext assignment_op() {
		Assignment_opContext _localctx = new Assignment_opContext(Context, State);
		EnterRule(_localctx, 64, RULE_assignment_op);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 327;
			Match(VARIABLE_NAME);
			State = 328;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 2013265920L) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			State = 329;
			value();
			State = 330;
			Match(SEMICOLON);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Post_inccrement_or_decrement_no_semicolonContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VARIABLE_NAME() { return GetToken(MiniLanguageParser.VARIABLE_NAME, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INC() { return GetToken(MiniLanguageParser.INC, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DEC() { return GetToken(MiniLanguageParser.DEC, 0); }
		public Post_inccrement_or_decrement_no_semicolonContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_post_inccrement_or_decrement_no_semicolon; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMiniLanguageVisitor<TResult> typedVisitor = visitor as IMiniLanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPost_inccrement_or_decrement_no_semicolon(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Post_inccrement_or_decrement_no_semicolonContext post_inccrement_or_decrement_no_semicolon() {
		Post_inccrement_or_decrement_no_semicolonContext _localctx = new Post_inccrement_or_decrement_no_semicolonContext(Context, State);
		EnterRule(_localctx, 66, RULE_post_inccrement_or_decrement_no_semicolon);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 332;
			Match(VARIABLE_NAME);
			State = 333;
			_la = TokenStream.LA(1);
			if ( !(_la==INC || _la==DEC) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Post_inccrement_or_decrementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VARIABLE_NAME() { return GetToken(MiniLanguageParser.VARIABLE_NAME, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMICOLON() { return GetToken(MiniLanguageParser.SEMICOLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INC() { return GetToken(MiniLanguageParser.INC, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DEC() { return GetToken(MiniLanguageParser.DEC, 0); }
		public Post_inccrement_or_decrementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_post_inccrement_or_decrement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMiniLanguageVisitor<TResult> typedVisitor = visitor as IMiniLanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPost_inccrement_or_decrement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Post_inccrement_or_decrementContext post_inccrement_or_decrement() {
		Post_inccrement_or_decrementContext _localctx = new Post_inccrement_or_decrementContext(Context, State);
		EnterRule(_localctx, 68, RULE_post_inccrement_or_decrement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 335;
			Match(VARIABLE_NAME);
			State = 336;
			_la = TokenStream.LA(1);
			if ( !(_la==INC || _la==DEC) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			State = 337;
			Match(SEMICOLON);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Prev_inccrement_or_decrement_no_semicolonContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VARIABLE_NAME() { return GetToken(MiniLanguageParser.VARIABLE_NAME, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INC() { return GetToken(MiniLanguageParser.INC, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DEC() { return GetToken(MiniLanguageParser.DEC, 0); }
		public Prev_inccrement_or_decrement_no_semicolonContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_prev_inccrement_or_decrement_no_semicolon; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMiniLanguageVisitor<TResult> typedVisitor = visitor as IMiniLanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPrev_inccrement_or_decrement_no_semicolon(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Prev_inccrement_or_decrement_no_semicolonContext prev_inccrement_or_decrement_no_semicolon() {
		Prev_inccrement_or_decrement_no_semicolonContext _localctx = new Prev_inccrement_or_decrement_no_semicolonContext(Context, State);
		EnterRule(_localctx, 70, RULE_prev_inccrement_or_decrement_no_semicolon);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 339;
			_la = TokenStream.LA(1);
			if ( !(_la==INC || _la==DEC) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			State = 340;
			Match(VARIABLE_NAME);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Prev_inccrement_or_decrementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VARIABLE_NAME() { return GetToken(MiniLanguageParser.VARIABLE_NAME, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMICOLON() { return GetToken(MiniLanguageParser.SEMICOLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INC() { return GetToken(MiniLanguageParser.INC, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DEC() { return GetToken(MiniLanguageParser.DEC, 0); }
		public Prev_inccrement_or_decrementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_prev_inccrement_or_decrement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMiniLanguageVisitor<TResult> typedVisitor = visitor as IMiniLanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPrev_inccrement_or_decrement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Prev_inccrement_or_decrementContext prev_inccrement_or_decrement() {
		Prev_inccrement_or_decrementContext _localctx = new Prev_inccrement_or_decrementContext(Context, State);
		EnterRule(_localctx, 72, RULE_prev_inccrement_or_decrement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 342;
			_la = TokenStream.LA(1);
			if ( !(_la==INC || _la==DEC) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			State = 343;
			Match(VARIABLE_NAME);
			State = 344;
			Match(SEMICOLON);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	private static int[] _serializedATN = {
		4,1,45,347,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,6,2,7,
		7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,2,14,7,14,
		2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,20,7,20,2,21,7,21,
		2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,26,2,27,7,27,2,28,7,28,
		2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,33,7,33,2,34,7,34,2,35,7,35,
		2,36,7,36,1,0,1,0,1,0,1,0,5,0,79,8,0,10,0,12,0,82,9,0,1,0,1,0,5,0,86,8,
		0,10,0,12,0,89,9,0,1,0,1,0,1,1,1,1,1,1,1,1,1,1,3,1,98,8,1,1,1,1,1,3,1,
		102,8,1,1,2,1,2,1,2,1,2,3,2,108,8,2,1,2,1,2,3,2,112,8,2,1,2,1,2,3,2,116,
		8,2,1,3,1,3,1,3,1,3,1,3,1,3,5,3,124,8,3,10,3,12,3,127,9,3,1,4,1,4,1,4,
		1,5,1,5,1,5,5,5,135,8,5,10,5,12,5,138,9,5,1,5,1,5,1,6,1,6,1,6,1,6,1,6,
		1,6,1,6,1,6,1,6,3,6,151,8,6,1,7,1,7,1,7,1,7,1,7,3,7,158,8,7,1,7,1,7,3,
		7,162,8,7,1,7,1,7,3,7,166,8,7,1,7,1,7,3,7,170,8,7,3,7,172,8,7,1,8,1,8,
		1,8,1,8,1,8,3,8,179,8,8,1,8,1,8,3,8,183,8,8,1,9,1,9,1,9,1,9,1,9,3,9,190,
		8,9,1,9,1,9,3,9,194,8,9,1,10,1,10,3,10,198,8,10,1,10,1,10,1,10,1,10,1,
		10,1,10,3,10,206,8,10,3,10,208,8,10,1,11,1,11,1,11,1,11,3,11,214,8,11,
		1,12,1,12,1,12,3,12,219,8,12,1,12,1,12,1,13,1,13,1,13,3,13,226,8,13,1,
		13,1,13,1,13,1,14,1,14,1,14,5,14,234,8,14,10,14,12,14,237,9,14,1,15,1,
		15,1,16,1,16,1,16,1,16,1,16,3,16,246,8,16,1,17,1,17,1,17,1,17,1,17,3,17,
		253,8,17,1,18,1,18,1,18,1,18,1,18,3,18,260,8,18,1,19,1,19,1,19,1,19,1,
		19,3,19,267,8,19,1,20,3,20,270,8,20,1,20,1,20,1,21,1,21,1,21,3,21,277,
		8,21,1,22,1,22,1,22,1,22,1,22,1,23,1,23,1,23,1,23,1,23,1,23,3,23,290,8,
		23,1,24,1,24,1,24,1,24,3,24,296,8,24,1,25,1,25,1,26,1,26,3,26,302,8,26,
		1,27,1,27,1,27,1,27,1,27,3,27,309,8,27,1,28,1,28,1,29,1,29,1,29,1,29,1,
		30,1,30,1,30,1,30,1,30,3,30,322,8,30,1,31,1,31,1,31,1,31,1,32,1,32,1,32,
		1,32,1,32,1,33,1,33,1,33,1,34,1,34,1,34,1,34,1,35,1,35,1,35,1,36,1,36,
		1,36,1,36,1,36,0,0,37,0,2,4,6,8,10,12,14,16,18,20,22,24,26,28,30,32,34,
		36,38,40,42,44,46,48,50,52,54,56,58,60,62,64,66,68,70,72,0,9,1,0,23,24,
		1,0,17,22,1,0,15,16,1,0,13,14,2,0,16,16,25,25,1,0,3,6,1,0,39,41,1,0,27,
		30,1,0,31,32,363,0,80,1,0,0,0,2,92,1,0,0,0,4,103,1,0,0,0,6,117,1,0,0,0,
		8,128,1,0,0,0,10,131,1,0,0,0,12,150,1,0,0,0,14,152,1,0,0,0,16,173,1,0,
		0,0,18,184,1,0,0,0,20,197,1,0,0,0,22,209,1,0,0,0,24,215,1,0,0,0,26,222,
		1,0,0,0,28,230,1,0,0,0,30,238,1,0,0,0,32,245,1,0,0,0,34,252,1,0,0,0,36,
		259,1,0,0,0,38,266,1,0,0,0,40,269,1,0,0,0,42,276,1,0,0,0,44,278,1,0,0,
		0,46,283,1,0,0,0,48,291,1,0,0,0,50,297,1,0,0,0,52,301,1,0,0,0,54,308,1,
		0,0,0,56,310,1,0,0,0,58,312,1,0,0,0,60,316,1,0,0,0,62,323,1,0,0,0,64,327,
		1,0,0,0,66,332,1,0,0,0,68,335,1,0,0,0,70,339,1,0,0,0,72,342,1,0,0,0,74,
		79,3,48,24,0,75,79,3,46,23,0,76,79,3,4,2,0,77,79,5,45,0,0,78,74,1,0,0,
		0,78,75,1,0,0,0,78,76,1,0,0,0,78,77,1,0,0,0,79,82,1,0,0,0,80,78,1,0,0,
		0,80,81,1,0,0,0,81,83,1,0,0,0,82,80,1,0,0,0,83,87,3,2,1,0,84,86,5,45,0,
		0,85,84,1,0,0,0,86,89,1,0,0,0,87,85,1,0,0,0,87,88,1,0,0,0,88,90,1,0,0,
		0,89,87,1,0,0,0,90,91,5,0,0,1,91,1,1,0,0,0,92,93,3,52,26,0,93,94,5,1,0,
		0,94,95,5,33,0,0,95,101,5,34,0,0,96,98,5,45,0,0,97,96,1,0,0,0,97,98,1,
		0,0,0,98,99,1,0,0,0,99,102,3,8,4,0,100,102,3,10,5,0,101,97,1,0,0,0,101,
		100,1,0,0,0,102,3,1,0,0,0,103,104,3,52,26,0,104,105,5,43,0,0,105,107,5,
		33,0,0,106,108,3,6,3,0,107,106,1,0,0,0,107,108,1,0,0,0,108,109,1,0,0,0,
		109,115,5,34,0,0,110,112,5,45,0,0,111,110,1,0,0,0,111,112,1,0,0,0,112,
		113,1,0,0,0,113,116,3,8,4,0,114,116,3,10,5,0,115,111,1,0,0,0,115,114,1,
		0,0,0,116,5,1,0,0,0,117,118,3,50,25,0,118,125,5,43,0,0,119,120,5,38,0,
		0,120,121,3,50,25,0,121,122,5,43,0,0,122,124,1,0,0,0,123,119,1,0,0,0,124,
		127,1,0,0,0,125,123,1,0,0,0,125,126,1,0,0,0,126,7,1,0,0,0,127,125,1,0,
		0,0,128,129,5,2,0,0,129,130,3,10,5,0,130,9,1,0,0,0,131,136,5,35,0,0,132,
		135,5,45,0,0,133,135,3,12,6,0,134,132,1,0,0,0,134,133,1,0,0,0,135,138,
		1,0,0,0,136,134,1,0,0,0,136,137,1,0,0,0,137,139,1,0,0,0,138,136,1,0,0,
		0,139,140,5,36,0,0,140,11,1,0,0,0,141,151,3,60,30,0,142,151,3,64,32,0,
		143,151,3,48,24,0,144,151,3,46,23,0,145,151,3,26,13,0,146,151,3,14,7,0,
		147,151,3,16,8,0,148,151,3,18,9,0,149,151,3,22,11,0,150,141,1,0,0,0,150,
		142,1,0,0,0,150,143,1,0,0,0,150,144,1,0,0,0,150,145,1,0,0,0,150,146,1,
		0,0,0,150,147,1,0,0,0,150,148,1,0,0,0,150,149,1,0,0,0,151,13,1,0,0,0,152,
		153,5,8,0,0,153,154,5,33,0,0,154,155,3,32,16,0,155,161,5,34,0,0,156,158,
		5,45,0,0,157,156,1,0,0,0,157,158,1,0,0,0,158,159,1,0,0,0,159,162,3,8,4,
		0,160,162,3,10,5,0,161,157,1,0,0,0,161,160,1,0,0,0,162,171,1,0,0,0,163,
		169,5,9,0,0,164,166,5,45,0,0,165,164,1,0,0,0,165,166,1,0,0,0,166,167,1,
		0,0,0,167,170,3,8,4,0,168,170,3,10,5,0,169,165,1,0,0,0,169,168,1,0,0,0,
		170,172,1,0,0,0,171,163,1,0,0,0,171,172,1,0,0,0,172,15,1,0,0,0,173,174,
		5,10,0,0,174,175,5,33,0,0,175,176,3,30,15,0,176,182,5,34,0,0,177,179,5,
		45,0,0,178,177,1,0,0,0,178,179,1,0,0,0,179,180,1,0,0,0,180,183,3,8,4,0,
		181,183,3,10,5,0,182,178,1,0,0,0,182,181,1,0,0,0,183,17,1,0,0,0,184,185,
		5,11,0,0,185,186,5,33,0,0,186,187,3,20,10,0,187,193,5,34,0,0,188,190,5,
		45,0,0,189,188,1,0,0,0,189,190,1,0,0,0,190,191,1,0,0,0,191,194,3,8,4,0,
		192,194,3,10,5,0,193,189,1,0,0,0,193,192,1,0,0,0,194,19,1,0,0,0,195,198,
		3,58,29,0,196,198,3,44,22,0,197,195,1,0,0,0,197,196,1,0,0,0,197,198,1,
		0,0,0,198,199,1,0,0,0,199,200,5,37,0,0,200,201,3,30,15,0,201,207,5,37,
		0,0,202,208,3,62,31,0,203,206,3,70,35,0,204,206,3,66,33,0,205,203,1,0,
		0,0,205,204,1,0,0,0,206,208,1,0,0,0,207,202,1,0,0,0,207,205,1,0,0,0,207,
		208,1,0,0,0,208,21,1,0,0,0,209,210,5,12,0,0,210,211,3,30,15,0,211,213,
		5,37,0,0,212,214,5,45,0,0,213,212,1,0,0,0,213,214,1,0,0,0,214,23,1,0,0,
		0,215,216,5,43,0,0,216,218,5,33,0,0,217,219,3,28,14,0,218,217,1,0,0,0,
		218,219,1,0,0,0,219,220,1,0,0,0,220,221,5,34,0,0,221,25,1,0,0,0,222,223,
		5,43,0,0,223,225,5,33,0,0,224,226,3,28,14,0,225,224,1,0,0,0,225,226,1,
		0,0,0,226,227,1,0,0,0,227,228,5,34,0,0,228,229,5,37,0,0,229,27,1,0,0,0,
		230,235,5,43,0,0,231,232,5,38,0,0,232,234,5,43,0,0,233,231,1,0,0,0,234,
		237,1,0,0,0,235,233,1,0,0,0,235,236,1,0,0,0,236,29,1,0,0,0,237,235,1,0,
		0,0,238,239,3,32,16,0,239,31,1,0,0,0,240,246,3,34,17,0,241,242,3,34,17,
		0,242,243,7,0,0,0,243,244,3,34,17,0,244,246,1,0,0,0,245,240,1,0,0,0,245,
		241,1,0,0,0,246,33,1,0,0,0,247,253,3,36,18,0,248,249,3,36,18,0,249,250,
		7,1,0,0,250,251,3,36,18,0,251,253,1,0,0,0,252,247,1,0,0,0,252,248,1,0,
		0,0,253,35,1,0,0,0,254,260,3,38,19,0,255,256,3,38,19,0,256,257,7,2,0,0,
		257,258,3,38,19,0,258,260,1,0,0,0,259,254,1,0,0,0,259,255,1,0,0,0,260,
		37,1,0,0,0,261,267,3,40,20,0,262,263,3,40,20,0,263,264,7,3,0,0,264,265,
		3,40,20,0,265,267,1,0,0,0,266,261,1,0,0,0,266,262,1,0,0,0,267,39,1,0,0,
		0,268,270,7,4,0,0,269,268,1,0,0,0,269,270,1,0,0,0,270,271,1,0,0,0,271,
		272,3,42,21,0,272,41,1,0,0,0,273,277,5,43,0,0,274,277,3,56,28,0,275,277,
		5,42,0,0,276,273,1,0,0,0,276,274,1,0,0,0,276,275,1,0,0,0,277,43,1,0,0,
		0,278,279,3,50,25,0,279,280,5,43,0,0,280,281,5,26,0,0,281,282,3,54,27,
		0,282,45,1,0,0,0,283,284,3,50,25,0,284,285,5,43,0,0,285,286,5,26,0,0,286,
		287,3,54,27,0,287,289,5,37,0,0,288,290,5,45,0,0,289,288,1,0,0,0,289,290,
		1,0,0,0,290,47,1,0,0,0,291,292,3,50,25,0,292,293,5,43,0,0,293,295,5,37,
		0,0,294,296,5,45,0,0,295,294,1,0,0,0,295,296,1,0,0,0,296,49,1,0,0,0,297,
		298,7,5,0,0,298,51,1,0,0,0,299,302,3,50,25,0,300,302,5,7,0,0,301,299,1,
		0,0,0,301,300,1,0,0,0,302,53,1,0,0,0,303,309,3,56,28,0,304,309,5,43,0,
		0,305,309,3,24,12,0,306,309,5,42,0,0,307,309,3,30,15,0,308,303,1,0,0,0,
		308,304,1,0,0,0,308,305,1,0,0,0,308,306,1,0,0,0,308,307,1,0,0,0,309,55,
		1,0,0,0,310,311,7,6,0,0,311,57,1,0,0,0,312,313,5,43,0,0,313,314,5,26,0,
		0,314,315,3,54,27,0,315,59,1,0,0,0,316,317,5,43,0,0,317,318,5,26,0,0,318,
		319,3,54,27,0,319,321,5,37,0,0,320,322,5,45,0,0,321,320,1,0,0,0,321,322,
		1,0,0,0,322,61,1,0,0,0,323,324,5,43,0,0,324,325,7,7,0,0,325,326,3,54,27,
		0,326,63,1,0,0,0,327,328,5,43,0,0,328,329,7,7,0,0,329,330,3,54,27,0,330,
		331,5,37,0,0,331,65,1,0,0,0,332,333,5,43,0,0,333,334,7,8,0,0,334,67,1,
		0,0,0,335,336,5,43,0,0,336,337,7,8,0,0,337,338,5,37,0,0,338,69,1,0,0,0,
		339,340,7,8,0,0,340,341,5,43,0,0,341,71,1,0,0,0,342,343,7,8,0,0,343,344,
		5,43,0,0,344,345,5,37,0,0,345,73,1,0,0,0,39,78,80,87,97,101,107,111,115,
		125,134,136,150,157,161,165,169,171,178,182,189,193,197,205,207,213,218,
		225,235,245,252,259,266,269,276,289,295,301,308,321
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
