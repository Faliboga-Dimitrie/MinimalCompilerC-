//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.13.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from c:/Users/Dimitrie_U/1Facultate/Anul2/Semestrul1/LFC/Proiecte/Proiect2/MinimalCompilerC++/MinimalCompilerC++/MiniLanguage.g4 by ANTLR 4.13.1

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.13.1")]
[System.CLSCompliant(false)]
public partial class MiniLanguageLexer : Lexer {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		MAIN_FUNCTION=1, NEW_LINE=2, INTEGER_TYPE=3, FLOAT_TYPE=4, DOUBLE_TYPE=5, 
		STRING_TYPE=6, VOID_TYPE=7, IF=8, ELSE=9, WHILE=10, FOR=11, RETURN=12, 
		ASTERISK=13, SLASH=14, PLUS=15, MINUS=16, LESS_THAN=17, LESS_THAN_OR_EQUAL=18, 
		GREATER_THAN=19, GREATER_THAN_OR_EQUAL=20, EQUAL=21, NOT_EQUAL=22, AND=23, 
		OR=24, NOT=25, EQUALS=26, ADD_EQUALS=27, SUB_EQUALS=28, MUL_EQUALS=29, 
		DIV_EQUALS=30, INC=31, DEC=32, LPARAN=33, RPARAN=34, LBRACE=35, RBRACE=36, 
		SEMICOLON=37, COMMA=38, INTEGER_VALUE=39, FLOAT_VALUE=40, DOUBLE_VALUE=41, 
		STRING_VALUE=42, VARIABLE_NAME=43, WS=44, COMMENT=45;
	public static string[] channelNames = {
		"DEFAULT_TOKEN_CHANNEL", "HIDDEN"
	};

	public static string[] modeNames = {
		"DEFAULT_MODE"
	};

	public static readonly string[] ruleNames = {
		"DIGIT", "NON_ZERO_DIGIT", "LETTER", "MAIN_FUNCTION", "NEW_LINE", "INTEGER_TYPE", 
		"FLOAT_TYPE", "DOUBLE_TYPE", "STRING_TYPE", "VOID_TYPE", "IF", "ELSE", 
		"WHILE", "FOR", "RETURN", "ASTERISK", "SLASH", "PLUS", "MINUS", "LESS_THAN", 
		"LESS_THAN_OR_EQUAL", "GREATER_THAN", "GREATER_THAN_OR_EQUAL", "EQUAL", 
		"NOT_EQUAL", "AND", "OR", "NOT", "EQUALS", "ADD_EQUALS", "SUB_EQUALS", 
		"MUL_EQUALS", "DIV_EQUALS", "INC", "DEC", "LPARAN", "RPARAN", "LBRACE", 
		"RBRACE", "SEMICOLON", "COMMA", "INTEGER_VALUE", "FLOAT_VALUE", "DOUBLE_VALUE", 
		"STRING_VALUE", "VARIABLE_NAME", "WS", "COMMENT"
	};


	public MiniLanguageLexer(ICharStream input)
	: this(input, Console.Out, Console.Error) { }

	public MiniLanguageLexer(ICharStream input, TextWriter output, TextWriter errorOutput)
	: base(input, output, errorOutput)
	{
		Interpreter = new LexerATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	private static readonly string[] _LiteralNames = {
		null, "'main'", "'\\n'", "'int'", "'float'", "'double'", "'string'", "'void'", 
		"'if'", "'else'", "'while'", "'for'", "'return'", "'*'", "'/'", "'+'", 
		"'-'", "'<'", "'<='", "'>'", "'>='", "'=='", "'!='", "'&&'", "'||'", "'!'", 
		"'='", "'+='", "'-='", "'*='", "'/='", "'++'", "'--'", "'('", "')'", "'{'", 
		"'}'", "';'", "','"
	};
	private static readonly string[] _SymbolicNames = {
		null, "MAIN_FUNCTION", "NEW_LINE", "INTEGER_TYPE", "FLOAT_TYPE", "DOUBLE_TYPE", 
		"STRING_TYPE", "VOID_TYPE", "IF", "ELSE", "WHILE", "FOR", "RETURN", "ASTERISK", 
		"SLASH", "PLUS", "MINUS", "LESS_THAN", "LESS_THAN_OR_EQUAL", "GREATER_THAN", 
		"GREATER_THAN_OR_EQUAL", "EQUAL", "NOT_EQUAL", "AND", "OR", "NOT", "EQUALS", 
		"ADD_EQUALS", "SUB_EQUALS", "MUL_EQUALS", "DIV_EQUALS", "INC", "DEC", 
		"LPARAN", "RPARAN", "LBRACE", "RBRACE", "SEMICOLON", "COMMA", "INTEGER_VALUE", 
		"FLOAT_VALUE", "DOUBLE_VALUE", "STRING_VALUE", "VARIABLE_NAME", "WS", 
		"COMMENT"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "MiniLanguage.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string[] ChannelNames { get { return channelNames; } }

	public override string[] ModeNames { get { return modeNames; } }

	public override int[] SerializedAtn { get { return _serializedATN; } }

	static MiniLanguageLexer() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}
	private static int[] _serializedATN = {
		4,0,45,297,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,
		6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,2,14,
		7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,20,7,20,2,21,
		7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,26,2,27,7,27,2,28,
		7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,33,7,33,2,34,7,34,2,35,
		7,35,2,36,7,36,2,37,7,37,2,38,7,38,2,39,7,39,2,40,7,40,2,41,7,41,2,42,
		7,42,2,43,7,43,2,44,7,44,2,45,7,45,2,46,7,46,2,47,7,47,1,0,1,0,1,1,1,1,
		1,2,1,2,1,3,1,3,1,3,1,3,1,3,1,4,1,4,1,5,1,5,1,5,1,5,1,6,1,6,1,6,1,6,1,
		6,1,6,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,9,1,9,
		1,9,1,9,1,9,1,10,1,10,1,10,1,11,1,11,1,11,1,11,1,11,1,12,1,12,1,12,1,12,
		1,12,1,12,1,13,1,13,1,13,1,13,1,14,1,14,1,14,1,14,1,14,1,14,1,14,1,15,
		1,15,1,16,1,16,1,17,1,17,1,18,1,18,1,19,1,19,1,20,1,20,1,20,1,21,1,21,
		1,22,1,22,1,22,1,23,1,23,1,23,1,24,1,24,1,24,1,25,1,25,1,25,1,26,1,26,
		1,26,1,27,1,27,1,28,1,28,1,29,1,29,1,29,1,30,1,30,1,30,1,31,1,31,1,31,
		1,32,1,32,1,32,1,33,1,33,1,33,1,34,1,34,1,34,1,35,1,35,1,36,1,36,1,37,
		1,37,1,38,1,38,1,39,1,39,1,40,1,40,1,41,1,41,1,41,5,41,232,8,41,10,41,
		12,41,235,9,41,3,41,237,8,41,1,42,1,42,1,42,5,42,242,8,42,10,42,12,42,
		245,9,42,1,42,3,42,248,8,42,1,43,1,43,1,43,5,43,253,8,43,10,43,12,43,256,
		9,43,1,43,3,43,259,8,43,1,44,1,44,4,44,263,8,44,11,44,12,44,264,1,44,1,
		44,1,44,3,44,270,8,44,1,45,1,45,1,45,5,45,275,8,45,10,45,12,45,278,9,45,
		1,46,4,46,281,8,46,11,46,12,46,282,1,46,1,46,1,47,1,47,1,47,1,47,5,47,
		291,8,47,10,47,12,47,294,9,47,1,47,1,47,1,264,0,48,1,0,3,0,5,0,7,1,9,2,
		11,3,13,4,15,5,17,6,19,7,21,8,23,9,25,10,27,11,29,12,31,13,33,14,35,15,
		37,16,39,17,41,18,43,19,45,20,47,21,49,22,51,23,53,24,55,25,57,26,59,27,
		61,28,63,29,65,30,67,31,69,32,71,33,73,34,75,35,77,36,79,37,81,38,83,39,
		85,40,87,41,89,42,91,43,93,44,95,45,1,0,5,1,0,48,57,1,0,49,57,2,0,65,90,
		97,122,3,0,9,10,13,13,32,32,2,0,10,10,13,13,305,0,7,1,0,0,0,0,9,1,0,0,
		0,0,11,1,0,0,0,0,13,1,0,0,0,0,15,1,0,0,0,0,17,1,0,0,0,0,19,1,0,0,0,0,21,
		1,0,0,0,0,23,1,0,0,0,0,25,1,0,0,0,0,27,1,0,0,0,0,29,1,0,0,0,0,31,1,0,0,
		0,0,33,1,0,0,0,0,35,1,0,0,0,0,37,1,0,0,0,0,39,1,0,0,0,0,41,1,0,0,0,0,43,
		1,0,0,0,0,45,1,0,0,0,0,47,1,0,0,0,0,49,1,0,0,0,0,51,1,0,0,0,0,53,1,0,0,
		0,0,55,1,0,0,0,0,57,1,0,0,0,0,59,1,0,0,0,0,61,1,0,0,0,0,63,1,0,0,0,0,65,
		1,0,0,0,0,67,1,0,0,0,0,69,1,0,0,0,0,71,1,0,0,0,0,73,1,0,0,0,0,75,1,0,0,
		0,0,77,1,0,0,0,0,79,1,0,0,0,0,81,1,0,0,0,0,83,1,0,0,0,0,85,1,0,0,0,0,87,
		1,0,0,0,0,89,1,0,0,0,0,91,1,0,0,0,0,93,1,0,0,0,0,95,1,0,0,0,1,97,1,0,0,
		0,3,99,1,0,0,0,5,101,1,0,0,0,7,103,1,0,0,0,9,108,1,0,0,0,11,110,1,0,0,
		0,13,114,1,0,0,0,15,120,1,0,0,0,17,127,1,0,0,0,19,134,1,0,0,0,21,139,1,
		0,0,0,23,142,1,0,0,0,25,147,1,0,0,0,27,153,1,0,0,0,29,157,1,0,0,0,31,164,
		1,0,0,0,33,166,1,0,0,0,35,168,1,0,0,0,37,170,1,0,0,0,39,172,1,0,0,0,41,
		174,1,0,0,0,43,177,1,0,0,0,45,179,1,0,0,0,47,182,1,0,0,0,49,185,1,0,0,
		0,51,188,1,0,0,0,53,191,1,0,0,0,55,194,1,0,0,0,57,196,1,0,0,0,59,198,1,
		0,0,0,61,201,1,0,0,0,63,204,1,0,0,0,65,207,1,0,0,0,67,210,1,0,0,0,69,213,
		1,0,0,0,71,216,1,0,0,0,73,218,1,0,0,0,75,220,1,0,0,0,77,222,1,0,0,0,79,
		224,1,0,0,0,81,226,1,0,0,0,83,236,1,0,0,0,85,238,1,0,0,0,87,249,1,0,0,
		0,89,269,1,0,0,0,91,271,1,0,0,0,93,280,1,0,0,0,95,286,1,0,0,0,97,98,7,
		0,0,0,98,2,1,0,0,0,99,100,7,1,0,0,100,4,1,0,0,0,101,102,7,2,0,0,102,6,
		1,0,0,0,103,104,5,109,0,0,104,105,5,97,0,0,105,106,5,105,0,0,106,107,5,
		110,0,0,107,8,1,0,0,0,108,109,5,10,0,0,109,10,1,0,0,0,110,111,5,105,0,
		0,111,112,5,110,0,0,112,113,5,116,0,0,113,12,1,0,0,0,114,115,5,102,0,0,
		115,116,5,108,0,0,116,117,5,111,0,0,117,118,5,97,0,0,118,119,5,116,0,0,
		119,14,1,0,0,0,120,121,5,100,0,0,121,122,5,111,0,0,122,123,5,117,0,0,123,
		124,5,98,0,0,124,125,5,108,0,0,125,126,5,101,0,0,126,16,1,0,0,0,127,128,
		5,115,0,0,128,129,5,116,0,0,129,130,5,114,0,0,130,131,5,105,0,0,131,132,
		5,110,0,0,132,133,5,103,0,0,133,18,1,0,0,0,134,135,5,118,0,0,135,136,5,
		111,0,0,136,137,5,105,0,0,137,138,5,100,0,0,138,20,1,0,0,0,139,140,5,105,
		0,0,140,141,5,102,0,0,141,22,1,0,0,0,142,143,5,101,0,0,143,144,5,108,0,
		0,144,145,5,115,0,0,145,146,5,101,0,0,146,24,1,0,0,0,147,148,5,119,0,0,
		148,149,5,104,0,0,149,150,5,105,0,0,150,151,5,108,0,0,151,152,5,101,0,
		0,152,26,1,0,0,0,153,154,5,102,0,0,154,155,5,111,0,0,155,156,5,114,0,0,
		156,28,1,0,0,0,157,158,5,114,0,0,158,159,5,101,0,0,159,160,5,116,0,0,160,
		161,5,117,0,0,161,162,5,114,0,0,162,163,5,110,0,0,163,30,1,0,0,0,164,165,
		5,42,0,0,165,32,1,0,0,0,166,167,5,47,0,0,167,34,1,0,0,0,168,169,5,43,0,
		0,169,36,1,0,0,0,170,171,5,45,0,0,171,38,1,0,0,0,172,173,5,60,0,0,173,
		40,1,0,0,0,174,175,5,60,0,0,175,176,5,61,0,0,176,42,1,0,0,0,177,178,5,
		62,0,0,178,44,1,0,0,0,179,180,5,62,0,0,180,181,5,61,0,0,181,46,1,0,0,0,
		182,183,5,61,0,0,183,184,5,61,0,0,184,48,1,0,0,0,185,186,5,33,0,0,186,
		187,5,61,0,0,187,50,1,0,0,0,188,189,5,38,0,0,189,190,5,38,0,0,190,52,1,
		0,0,0,191,192,5,124,0,0,192,193,5,124,0,0,193,54,1,0,0,0,194,195,5,33,
		0,0,195,56,1,0,0,0,196,197,5,61,0,0,197,58,1,0,0,0,198,199,5,43,0,0,199,
		200,5,61,0,0,200,60,1,0,0,0,201,202,5,45,0,0,202,203,5,61,0,0,203,62,1,
		0,0,0,204,205,5,42,0,0,205,206,5,61,0,0,206,64,1,0,0,0,207,208,5,47,0,
		0,208,209,5,61,0,0,209,66,1,0,0,0,210,211,5,43,0,0,211,212,5,43,0,0,212,
		68,1,0,0,0,213,214,5,45,0,0,214,215,5,45,0,0,215,70,1,0,0,0,216,217,5,
		40,0,0,217,72,1,0,0,0,218,219,5,41,0,0,219,74,1,0,0,0,220,221,5,123,0,
		0,221,76,1,0,0,0,222,223,5,125,0,0,223,78,1,0,0,0,224,225,5,59,0,0,225,
		80,1,0,0,0,226,227,5,44,0,0,227,82,1,0,0,0,228,237,3,1,0,0,229,233,3,3,
		1,0,230,232,3,1,0,0,231,230,1,0,0,0,232,235,1,0,0,0,233,231,1,0,0,0,233,
		234,1,0,0,0,234,237,1,0,0,0,235,233,1,0,0,0,236,228,1,0,0,0,236,229,1,
		0,0,0,237,84,1,0,0,0,238,239,3,83,41,0,239,243,5,46,0,0,240,242,3,1,0,
		0,241,240,1,0,0,0,242,245,1,0,0,0,243,241,1,0,0,0,243,244,1,0,0,0,244,
		247,1,0,0,0,245,243,1,0,0,0,246,248,5,102,0,0,247,246,1,0,0,0,247,248,
		1,0,0,0,248,86,1,0,0,0,249,250,3,83,41,0,250,254,5,46,0,0,251,253,3,1,
		0,0,252,251,1,0,0,0,253,256,1,0,0,0,254,252,1,0,0,0,254,255,1,0,0,0,255,
		258,1,0,0,0,256,254,1,0,0,0,257,259,5,100,0,0,258,257,1,0,0,0,258,259,
		1,0,0,0,259,88,1,0,0,0,260,262,5,34,0,0,261,263,9,0,0,0,262,261,1,0,0,
		0,263,264,1,0,0,0,264,265,1,0,0,0,264,262,1,0,0,0,265,266,1,0,0,0,266,
		270,5,34,0,0,267,268,5,34,0,0,268,270,5,34,0,0,269,260,1,0,0,0,269,267,
		1,0,0,0,270,90,1,0,0,0,271,276,3,5,2,0,272,275,3,5,2,0,273,275,3,1,0,0,
		274,272,1,0,0,0,274,273,1,0,0,0,275,278,1,0,0,0,276,274,1,0,0,0,276,277,
		1,0,0,0,277,92,1,0,0,0,278,276,1,0,0,0,279,281,7,3,0,0,280,279,1,0,0,0,
		281,282,1,0,0,0,282,280,1,0,0,0,282,283,1,0,0,0,283,284,1,0,0,0,284,285,
		6,46,0,0,285,94,1,0,0,0,286,287,5,47,0,0,287,288,5,47,0,0,288,292,1,0,
		0,0,289,291,8,4,0,0,290,289,1,0,0,0,291,294,1,0,0,0,292,290,1,0,0,0,292,
		293,1,0,0,0,293,295,1,0,0,0,294,292,1,0,0,0,295,296,6,47,0,0,296,96,1,
		0,0,0,13,0,233,236,243,247,254,258,264,269,274,276,282,292,1,6,0,0
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
